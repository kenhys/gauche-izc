;;;
;;; izclib.stub
;;;

"
#include \"izc.h\"
#include <limits.h>
"

;; The following entry is a dummy one.
;; Replace it for your definitions.
(define-constant CS_ERR_NONE 0)
(define-constant CS_ERR_GETVALUE -1)
(define-constant CS_INT_MIN -2147483648)
(define-constant CS_INT_MAX 2147483647)

(define-type <csint> "CSint*" "csint"
  "CSINT_P" "CSINT_UNBOX" "CSINT_BOX")
(define-type <csint-array> "CSint**" "csint-array"
  "CSINTARRAY_P" "CSINTARRAY_UNBOX" "CSINTARRAY_BOX")

"
/* NOTE: global proc object. so don't use this in multithread code.*/
static ScmObj g_findFreeVarProc = SCM_NIL;
static ScmObj g_criteriaProc = SCM_NIL;
static ScmObj g_foundProc = SCM_NIL;
static ScmObj g_backtrackProc = SCM_NIL;
static int g_errno = 0;
"

;; Workaround CiSE defects on sizeof(type) where type is a reserved word.
;; see ext/binary/binarylib.stub
"typedef int    int_;"
"typedef CSint*    csintp_;"

(define-cproc return-true () ::<boolean>
  (expr "TRUE"))
(define-cproc return-false () ::<boolean>
  (expr "FALSE"))
(define-cproc return-1 () ::<boolean>
  (expr "1"))
(define-cproc return-0 () ::<boolean>
  (expr "0"))

;;
(define-cproc cs-info
  (vint::<csint>)
  (let* []
    (begin 
      (cs_printf "CSint* info(0x%p)\\n\\tdomain: %T\\n" vint vint)
      (printf "\tname: %s\n" (cs_getName vint))
      (printf "\tmin: %d\n" (cs_getMin vint))
      (printf "\tmax: %d\n" (cs_getMax vint)))))

;;  CSint *cs_createCSint(int min, int max);
(define-cproc cs-create-csint
  (min::<int>
   max::<int>) ::<csint>
   (result (cs_createCSint min max)))

;;  CSint *cs_createNamedCSint(int min, int max, char *name);
(define-cproc cs-create-named-csint
  (min::<int>
   max::<int>
   name::<const-cstring>?) ::<csint>
   (expr "cs_createNamedCSint(min, max, (char*)name)")
   )
;;  CSint *CSINT(int n);
(define-cproc csint(n::<int>) ::<csint>
  (result (CSINT n)))


;;  CSint *cs_createCSintFromDomain(int *tcoeff, int size);
;; NOTE: changed int* parameter to list.


(define-cproc cs-create-csint-from-domain
  (tcoeff::<list>) ::<csint>
  (let* ([size::int (Scm_Length tcoeff)]
	 [pack::int* (calloc (sizeof int_) size)]
	 [i::int 0]
	 [vint::CSint* NULL])
    (if (!= pack NULL)
	(begin
	  (for [() (< i size) (post++ i)]
	       (set! (aref pack i)
		     (SCM_INT_VALUE (Scm_ListRef tcoeff i SCM_UNBOUND))))
	  (set! vint (cs_createCSintFromDomain pack size))
	  (free pack))
        (Scm_Error "array of int required, but got NULL"))
    (result vint)))

;; CSint **cs_createCSintArray(int size, int min, int max);
;; NOTE: gauche support vector or list as return type of results.
(define-cproc cs-create-csint-vector
  (size::<int> min::<int> max::<int>) ::<vector>
  (let* ([vars::CSint**]
	 [csint::CSint*]
	 [i::int 0]
	 [vec::ScmVector*]
	 [scm::ScmObj])
    (set! vars (cs_createCSintArray size min max))
    (if (!= vars NULL)
	(begin
	  (set! vec (SCM_VECTOR (Scm_MakeVector size SCM_NIL)))
	  (for [() (< i size) (post++ i)]
	       (Scm_VectorSet vec  i (CSINT_BOX (aref vars i)))))
	(set! vec NULL))
    (result vec)))

(define-cproc cs-create-csint-list
  (size::<int> min::<int> max::<int>) ::<list>
  (let* ([vars::CSint**]
	 [csint::CSint*]
	 [i::int 0]
	 [vec::ScmVector*]
	 [scm::ScmObj])
    (set! vars (cs_createCSintArray size min max))
    (if (!= vars NULL)
	(begin
	  (set! vec (SCM_VECTOR (Scm_MakeVector size SCM_NIL)))
	  (for [() (< i size) (post++ i)]
	       (Scm_VectorSet vec  i (CSINT_BOX (aref vars i)))))
	(set! vec NULL))
    (result (Scm_VectorToList vec 0 -1))))

;;  void cs_setName(CSint *vint, char *name);
(define-cproc cs-set-name
  (vint::<csint>
   name::<const-cstring>) ::<void>
   (body "cs_setName(vint, (char *)name);"))

;;  IZBOOL cs_isFree(CSint* vint);
(define-cproc cs-is-free
  (vint::<csint>) ::<boolean>
  (result (cs_isFree vint)))

;;  IZBOOL cs_isInstantiated(CSint* vint);
(define-cproc cs-is-instantiated
  (vint::<csint>) ::<boolean>
  (result (cs_isInstantiated vint)))

;;  int cs_getMin(CSint* vint);
(define-cproc cs-get-min
  (vint::<csint>) ::<int>
  (result (cs_getMin vint)))

;;  int cs_getMax(CSint* vint);
(define-cproc cs-get-max
  (vint::<csint>) ::<int>
  (result (cs_getMax vint)))

;;  int cs_getNbElements(CSint* vint);
(define-cproc cs-get-nb-elements
  (vint::<csint>) ::<int>
  (result (cs_getNbElements vint)))

;;  int cs_getNbConstraints(CSint* vint);
(define-cproc cs-get-nb-constraints
  (vint::<csint>) ::<int>
  (result (cs_getNbConstraints vint)))

;;  char* cs_getName(CSint* vint);
(define-cproc cs-get-name
  (vint::<csint>) ::<const-cstring>
  (result (cs_getName vint)))
  ;; (body <const-cstring>
  ;; 	"cs_printf(\"%A\\n\", vint);"
  ;; 	"char *str = cs_getName(vint);"
  ;; 	"printf(\"%p\\n\", str);"
  ;; 	"SCM_RESULT = cs_getName(vint);"))

;;  int cs_getValue(CSint *vint);
(define-cproc cs-get-value
  (vint::<csint>) ::<int>
  (result (cs_getValue vint)))

;;  int cs_getNextValue(CSint *vint, int val);
(define-cproc cs-get-next-value
  (vint::<csint>
   val::<int>) ::<int>
   (result (cs_getNextValue vint val)))

;;  int cs_getPreviousValue(CSint *vint, int val);
(define-cproc cs-get-previous-value
  (vint::<csint>
   val::<int>) ::<int>
   (result (cs_getPreviousValue vint val)))

;;
;; cs_getDomain returns array of int.
;; so, cs-get-domain mapped to return list of int.
;;
(define-cproc cs-get-domain
  (vint::<csint>) ::<list>
  (let* ([size::int (cs_getNbElements vint)]
	 [i::int 0]
	 [retval SCM_FALSE]
	 [vec::ScmVector* (SCM_VECTOR (Scm_MakeVector size SCM_NIL))]
	 [vals::int* NULL])
    (.if DEBUG
	 (printf "call cs-get-domain\n"))
    (if (<= size 0)
        ;; error
	(begin
	  (.if DEBUG
	       (printf "failed to get nb elements:%d\n" size))
	  (set! retval SCM_FALSE))
        ;;
	(begin
	  (set! vals (cs_getDomain vint))
	  (for [() (< i size) (post++ i)]
	       (Scm_VectorSet vec i (SCM_OBJ (Scm_MakeInteger (aref vals i)))))
	  (set! retval (Scm_VectorToList vec 0 -1))))
    (result retval)))

;;  IZBOOL cs_isIn(CSint *vint, int val);
(define-cproc cs-is-in
  (vint::<csint> val::<int>) ::<boolean>
   (result (cs_isIn vint val)))

;;  void cs_printf(const char *control, ...);
;; (define-cproc cs-printf
;;   (control::<const-cstring>
;;    args)
;;   (body <boolean>
;;         ""
;;         "cs_printf(control, (append args(expr "cs_isIn(vint, val)"))

;;  void cs_fprintf(FILE *f, const char *control, ...);
;; In */

;;  IZBOOL cs_InArray(CSint *vint, int *array, int size);
(define-cproc cs-in-array
  (vint::<csint> array::<list>) ::<boolean>
  (let* ([size::int (Scm_Length array)]
	 [range::int* (calloc (sizeof int_) size)]
	 [i::int 0]
	 [ret::int 0])
    (if (!= range NULL)
        (begin
	  (for [() (< i size) (post++ i)]
	       (set! (aref range i) (SCM_INT_VALUE (Scm_ListRef array i SCM_UNBOUND))))
	  (set! ret (cs_InArray vint range size))
	  (free range))
        ;; error
	(Scm_Error "array of int required, but got NULL"))
    (result ret)))

;;  IZBOOL cs_NotInArray(CSint *vint, int *array, int size);
(define-cproc cs-not-in-array
  (vint::<csint> array::<list>) ::<boolean>
  (let* ([size::int (Scm_Length array)]
	 [range::int* (calloc (sizeof int_) size)]
	 [i::int 0]
	 [ret::int 0])
    (if (!= range NULL)
        (begin
	  (for [() (< i size) (post++ i)]
	       (set! (aref range i) (SCM_INT_VALUE (Scm_ListRef array i SCM_UNBOUND))))
	  (set! ret (cs_NotInArray vint range size))
	  (free range))
        ;; error
	(Scm_Error "array of int required, but got NULL"))
    (result ret)))

;;  IZBOOL cs_InInterval(CSint *vint, int min, int max);
(define-cproc cs-in-interval
  (vint::<csint> min::<int> max::<int>) ::<boolean>
   (result (cs_InInterval vint min max)))

;;  IZBOOL cs_NotInInterval(CSint *vint, int min, int max);
(define-cproc cs-not-in-interval
  (vint::<csint> min::<int> max::<int>) ::<boolean>
  (result (cs_NotInInterval vint min max)))

;;  IZBOOL cs_AllNeq(CSint **tint, int size);
(define-cproc cs-all-neq-vector
  (vint::<vector>) ::<boolean>
  (let* ([size::int (SCM_VECTOR_SIZE vint)]
	 [vec::ScmVector* (SCM_VECTOR vint)]
	 [tint::CSint** (calloc (sizeof csintp_) size)]
	 [i::int 0]
	 [ret::int 0])
    (if (!= tint NULL)
        (begin
	  (for [() (< i size) (post++ i)]
	       (set! (aref tint i) (CSINT_UNBOX (Scm_VectorRef vec i SCM_NIL)))))
        ;; error
	(Scm_Error "array of CSint* required, but got NULL"))
    (result (cs_AllNeq tint size))))

(define-cproc cs-all-neq-list
  (vint::<list>) ::<boolean>
  (let* ([obj::ScmObj (Scm_ListToVector vint 0 -1)]
	 [size::int (SCM_VECTOR_SIZE obj)]
	 [vec::ScmVector* (SCM_VECTOR obj)]
	 [i::int 0]
	 [tint::CSint** (calloc (sizeof csintp_) size)])
    (if (!= tint NULL)
        (begin
	  (for [() (< i size) (post++ i)]
	       (set! (aref tint i) (CSINT_UNBOX (Scm_VectorRef vec i SCM_NIL))))
	  )
	;; error
	(Scm_Error "array of CSint* required, but got NULL"))
    (result (cs_AllNeq tint size))))
	 
;; Len */
;;  IZBOOL cs_Eq(CSint *vint1, CSint *vint2);
(define-cproc cs-eq-csint
  (vint1::<csint> vint2::<csint>) ::<boolean>
   (result (cs_Eq vint1 vint2)))

;;  IZBOOL cs_EQ(CSint *vint, int val);
(define-cproc cs-eq
  (vint1::<csint> val::<int>) ::<boolean>
  (result (cs_EQ vint1 val)))

;;  IZBOOL cs_Neq(CSint *vint1, CSint *vint2);
(define-cproc cs-neq-csint
  (vint1::<csint> vint2::<csint>) ::<boolean>
  (result (cs_Neq vint1 vint2)))

;;  IZBOOL cs_NEQ(CSint *vint, int val);
(define-cproc cs-neq
  (vint1::<csint> val::<int>) ::<boolean>
  (result (cs_NEQ vint1 val)))

;;  IZBOOL cs_Le(CSint *vint1, CSint *vint2);
(define-cproc cs-le-csint
  (vint1::<csint> vint2::<csint>) ::<boolean>
  (result (cs_Le vint1 vint2)))

;;  IZBOOL cs_LE(CSint *vint, int val);
(define-cproc cs-le
  (vint1::<csint> val::<int>) ::<boolean>
  (result (cs_LE vint1 val)))

;; IZBOOL cs_Ge(CSint *vint1, CSint *vint2);
(define-cproc cs-ge-csint
  (vint1::<csint> vint2::<csint>) ::<boolean>
  (result (cs_Ge vint1 vint2)))

;;  IZBOOL cs_GE(CSint *vint, int val);
(define-cproc cs-ge
  (vint1::<csint> val::<int>) ::<boolean>
  (result (cs_GE vint1 val)))

;;  IZBOOL cs_Lt(CSint *vint1, CSint *vint2);
(define-cproc cs-lt-csint
  (vint1::<csint> vint2::<csint>) ::<boolean>
  (result (cs_Lt vint1 vint2)))

;;  IZBOOL cs_LT(CSint *vint, int val);
(define-cproc cs-lt
  (vint1::<csint> val::<int>) ::<boolean>
  (result (cs_LT vint1 val)))

;;  IZBOOL cs_Gt(CSint *vint1, CSint *vint2);
(define-cproc cs-gt-csint
  (vint1::<csint> vint2::<csint>) ::<boolean>
  (result (cs_Gt vint1 vint2)))

;;  IZBOOL cs_GT(CSint *vint, int val);
(define-cproc cs-gt
  (vint1::<csint> val::<int>) ::<boolean>
  (result (cs_GT vint1 val)))

;; arith */
;;  CSint *cs_Add(CSint *vint1, CSint *vint2);
(define-cproc cs-add
  (vint1::<csint> vint2::<csint>) ::<csint>
  (result (cs_Add vint1 vint2)))

;;  CSint *cs_VAdd(int nbVars, CSint *vint, ...);
;; NOTE: consider proper API
;; pending.
;; (define-cproc cs-vadd
;;   (vint::<vector>)
;;   (body <boolean>
;;         "ScmVector *vec;"
;;         "CSint *csint;"
;;         "int size = 0;"
;;         "if (VECTOR_P(vint) == TRUE){"
;;         "vec = SCM_VECTOR(vint);"
;;         "size = SCM_VECTOR_SIZE(vin)"
;;         "}"))
;;  CSint *cs_Sub(CSint *vint1, CSint *vint2);
(define-cproc cs-sub
  (vint1::<csint> vint2::<csint>) ::<csint>
   (result (cs_Sub vint1 vint2)))

;;  CSint *cs_VSub(int nbVars, CSint *vint, ...);
;; (define-cproc cs-sub
;;   (vint1::<csint>
;;    vint2::<csint>) ::<csint>
;;    (expr "cs_Sub(vint1, vint2)"))
;;  CSint *cs_Mul(CSint *vint1, CSint *vint2);
(define-cproc cs-mul
  (vint1::<csint> vint2::<csint>) ::<csint>
   (result (cs_Mul vint1 vint2)))

;;  CSint *cs_VMul(int nbVars, CSint *vint, ...);
;;  CSint *cs_Div(CSint *vint1, CSint *vint2);
(define-cproc cs-div
  (vint1::<csint> vint2::<csint>) ::<csint>
  (result (cs_Div vint1 vint2)))

;;  CSint *cs_VDiv(int nbVars, CSint *vint, ...);
;;  CSint *cs_Sigma(CSint **tint, int size);
(define-cproc cs-sigma
  (vint::<vector>) ::<csint>
  (let* ([size::int (SCM_VECTOR_SIZE vint)]
  	 [vec::ScmVector* (SCM_VECTOR vint)]
  	 [i::int 0]
  	 [tint::CSint** (calloc (sizeof csintp_) size)]
  	 [retval SCM_FALSE])
    (if (!= tint NULL)
  	(begin
  	  (for [() (< i size) (post++ i)]
  	       (set! (aref tint i) (CSINT_UNBOX (Scm_VectorRef vec i SCM_NIL))))
  	  (set! retval (cs_Sigma tint size)))
        ;; error
        (set! retval SCM_NIL))
    (result retval)))

;;  CSint *cs_ScalProd(CSint **tint, int *tcoeff, int size);
(define-cproc cs-scal-prod
  (vint::<vector> vint2::<vector> n::<int>) ::<csint>
  (let* ([size::int (SCM_VECTOR_SIZE vint)]
  	 [vec::ScmVector* (SCM_VECTOR vint)]
  	 [i::int 0]
  	 [tint::CSint** (calloc (sizeof csintp_) size)]
  	 [size2::int (SCM_VECTOR_SIZE vint2)]
  	 [vec2::ScmVector* (SCM_VECTOR vint2)]
  	 [i2::int 0]
  	 [tint2::int* (calloc (sizeof int_) size2)]
  	 [retval::CSint* NULL])
    (begin
      (for [() (< i size) (post++ i)]
  	   (set! (aref tint i) (CSINT_UNBOX (Scm_VectorRef vec i SCM_NIL))))
      (for [() (< i2 size2) (post++ i2)]
  	   (set! (aref tint2 i2) (SCM_INT_VALUE (Scm_VectorRef vec2 i2 SCM_NIL)))))
    ;;
    (result (cs_ScalProd tint tint2 n))))

;;  CSint *cs_VScalProd(int nbVars, CSint *vint, ...);

;; abs */
;;  CSint *cs_Abs(CSint *vint);
(define-cproc cs-abs
  (vint1::<csint>) ::<csint>
  (expr "cs_Abs(vint1)"))
;; minmax */
;;  CSint *cs_Min(CSint **tint, int size);
(define-cproc cs-min-vector
  (vint::<vector>) ::<csint>
  (let* ([size::int (SCM_VECTOR_SIZE vint)]
	 [vec::ScmVector* (SCM_VECTOR vint)]
	 [vint1::CSint* NULL]
	 [vint2::CSint* NULL]
	 [min::CSint* NULL]
	 [i::int 0])
    (for [() (< i (- size 1)) (post++ i)]
	 (set! vint1 (CSINT_UNBOX (Scm_VectorRef vec i SCM_UNBOUND)))
	 (set! vint2 (CSINT_UNBOX (Scm_VectorRef vec (+ i 1) SCM_UNBOUND)))
	 (if (cs_Lt vint1 vint2)
	     (set! min vint1)
	     (set! min vint2)))
    (result min)))

(define-cproc cs-min-list
  (vint::<list>) ::<csint>
  (body <csint>
        "ScmObj obj = Scm_ListToVector(vint, 0, -1);"
        "int size = SCM_VECTOR_SIZE(obj);"
        "ScmVector* vec = SCM_VECTOR(obj);"
        "int i;"
        "CSint *vint1,*vint2,*min;"
        "for (i = 0; i < size-1; i++) {"
        "vint1 = CSINT_UNBOX(Scm_VectorRef(vec, i, SCM_UNBOUND));"
        "vint2 = CSINT_UNBOX(Scm_VectorRef(vec, i+1, SCM_UNBOUND));"
        "if (cs_Lt(vint1, vint2)){"
        "min = vint1;"
        "} else {"
        "min = vint2;"
        "}"
        "}"
        "SCM_RESULT = min;"))
;;  CSint *cs_VMin(int nbVars, CSint *vint, ...);
;;  CSint *cs_Max(CSint **tint, int size);
(define-cproc cs-max
  (vint::<vector>) ::<csint>
  (let* ([size::int (SCM_VECTOR_SIZE vint)]
	 [vec::ScmVector* (SCM_VECTOR vint)]
	 [vint1::CSint*]
	 [vint2::CSint*]
	 [max::CSint*])
    (let* ([i::int 0])
      (for [() (< i (- size 1)) (post++ i)]
	   (set! vint1 (CSINT_UNBOX (Scm_VectorRef vec i SCM_UNBOUND)))
	   (set! vint2 (CSINT_UNBOX (Scm_VectorRef vec (+ i 1) SCM_UNBOUND)))
	   (if (cs_Lt vint1 vint2)
	       (set! max vint2)
	       (set! max vint1))))
    (result max)))

;;  CSint *cs_VMax(int nbVars, CSint *vint, ...);
;; if */
;;  char cs_IfEq(CSint *vint1, CSint *vint2, int val1, int val2);
(define-cproc cs-if-eq
  (vint1::<csint> vint2::<csint> val1::<int> val2::<int>) ::<boolean>
  (let* ([ret::int (cs_IfEq vint1 vint2 val1 val2)]
	 [retval SCM_FALSE])
    (if (== ret 0)
	(set! retval SCM_FALSE)
	(set! retval SCM_TRUE))
    (return retval)))

;;  char cs_IfNeq(CSint *vint1, CSint *vint2, int val1, int val2);
(define-cproc cs-if-neq
  (vint1::<csint> vint2::<csint> val1::<int> val2::<int>) ::<boolean>
  (let* ([ret::int (cs_IfNeq vint1 vint2 val1 val2)]
	 [retval SCM_FALSE])
    (if (== ret 0)
	(set! retval SCM_FALSE)
	(set! retval SCM_TRUE))
    (return retval)))

;; occur */
;;  CSint *cs_Occur(CSint *vint, int val, CSint **tint, int size);
(define-cproc cs-occur
  (vint::<csint> val::<int> array::<vector>) ::<csint>
  (let* ([size::int (SCM_VECTOR_SIZE array)]
	 [vec::ScmVector* (SCM_VECTOR array)]
	 [tint::CSint** (calloc (sizeof csintp_) size)]
	 [i::int 0])
    (if (!= tint NULL) 
	(for [(set! i 0) (< i size) (post++ i)]
	     (set! (aref tint i) (CSINT_UNBOX (Scm_VectorRef vec i SCM_NIL))))
	)
    (result (cs_Occur vint val tint size))))

;;  CSint *cs_OccurDomain(int val, CSint **tint, int size);
;;  IZBOOL cs_OccurConstraints(CSint *vint, int val, CSint **tint, int size);
(define-cproc cs-occur-constraints
  (vint::<csint> val::<int> array::<vector>) ::<boolean>
  (body <boolean>
        "int size = SCM_VECTOR_SIZE(array);"
        "ScmVector* vec = SCM_VECTOR(array);"
        "int i;"
        "CSint **tint = SCM_NEW_ARRAY(CSint*, size);"
        "if (tint != NULL) {"
        "for (i = 0; i < size; i++) {"
        "tint[i] = CSINT_UNBOX(Scm_VectorRef(array, i, SCM_NIL));"
        "}"
        "} else {"
        "Scm_Error(\"failed to allocate CSint*, got NULL.\");"
        "}"
        "SCM_RESULT = SCM_MAKE_BOOL(cs_OccurConstraints(vint, val, tint, size));"))

;; index */
;;  CSint *cs_Index(CSint **tint, int size, int val);
(define-cproc cs-index
  (array val::<int>) ::<csint>
  (let* ([size::int 0]
	 [vec::ScmVector* NULL]
	 [tint::CSint** NULL])
    (cond [(SCM_VECTORP array)
	   (begin
	     (set! vec (SCM_VECTOR array))
	     (set! size (SCM_VECTOR_SIZE array)))]
	  [(SCM_LISTP array)
	   (begin
	     (set! vec (Scm_ListToVector array 0 -1))
	     (set! size (Scm_Length array)))]
	  [else 
	   (begin
	     (Scm_Error "cs-index vector or list is required, but got"))])
    (let* ([tint::CSint** (calloc (sizeof csintp_) size)]
	   [i::int 0])
      (if (!= tint NULL)
	  (for [(set! i 0) (< i size) (post++ i)]
	       (set! (aref tint i) (CSINT_UNBOX (Scm_VectorRef vec i SCM_NIL))))))
    (result (cs_Index tint size val))))

;; element */
;;  CSint *cs_Element(CSint *index, int *values, int size);
(define-cproc cs-element
  (vint::<csint> array::<list>)
  (body <csint>
        "int size = Scm_Length(array);"
        "int *values = calloc(sizeof(int), size);"
        "if (values != NULL) {"
        "int i;"
        "for (i = 0; i < size; i++) {"
        "values[i] = SCM_INT_VALUE(Scm_ListRef(array, i, 0));"
        "}"
        "} else {"
        "}"
        "SCM_RESULT = cs_Element(vint, values, size);"))
;; Search */
;;  void cs_printStats(void);
(define-cproc cs-print-stats () ::<void>
  (cs_printStats))

;;  void cs_fprintStats(FILE *f);
;;  CSint* cs_findFreeVar(CSint **allvars, int nbVars);
(define-cproc cs-find-free-var
  (vint::<vector>)
  (let* ([nbVars::int (SCM_VECTOR_SIZE vint)]
  	 [vec::ScmVector* (SCM_VECTOR vint)]
  	 [allvars::CSint** (calloc (sizeof csintp_) nbVars)]
  	 [i::int 0])
    (.if DEBUG
  	 (printf "cs-find-free-var called.vector nbVars:%d\n" nbVars))
    (if (!= allvars NULL)
        (for [() (< i nbVars) (post++ i)]
  	     (begin
  	       (set! (aref allvars i) (CSINT_UNBOX (Scm_VectorRef vec i SCM_NIL))))
  	     (.if DEBUG
  		  (cs_printf "vint[%d] %T\n" i (aref allvars i))))
  	(Scm_Error "warn"))
    (result (cs_findFreeVar allvars nbVars))))

;;  CSint* cs_findFreeVarNbElements(CSint **allvars, int nbVars);
(define-cproc cs-find-free-var-nb-elements
  (vint::<vector>) ::<csint>
  (let* ([nbVars::int (SCM_VECTOR_SIZE vint)]
  	 [vec::ScmVector* (SCM_VECTOR vint)]
  	 [allvars::CSint** (calloc (sizeof csintp_) nbVars)]
  	 [i::int 0])
    (.if DEBUG
	 (printf "vector nbVars:%d\n" nbVars))
    (if (!= allvars NULL)
        (begin
	  (for [() (< i nbVars) (post++ i)]
	       (set! (aref allvars i) 
		     (CSINT_UNBOX (Scm_VectorRef vec i SCM_NIL)))
	       (.if DEBUG
		    (cs_printf "vint[%d] %T\n" i (aref allvars i)))
	       )))
    (result (cs_findFreeVarNbElements allvars nbVars))))

;;  CSint* cs_findFreeVarNbElementsMin(CSint **allvars, int nbVars);
(define-cproc cs-find-free-var-nb-elements-min
  (vint::<vector>)
  (body <csint>
        "int nbVars = SCM_VECTOR_SIZE(vint);"
        "printf(\"cs-find-free-var-nb-elements-min called.\\n\");"
        "printf(\"vector nbVars:%d\\n\", nbVars);"
        "ScmVector *vec = SCM_VECTOR(vint);"
        "CSint **allvars = calloc(sizeof(CSint*), nbVars);"
        "if (allvars != NULL) {"
        "int i = 0;"
        "for (i = 0; i < nbVars; i++) {"
        "allvars[i] = CSINT_UNBOX(Scm_VectorRef(vec, i, SCM_NIL));"
        "#ifdef DEBUG"
        "cs_printf(\"vint[%d] %T\\n\", i, allvars[i]);"
        "#endif"
        "}"
        "} else {"
        "}"
        "SCM_RESULT = cs_findFreeVarNbElementsMin(allvars, nbVars);"))
;;  CSint* cs_findFreeVarNbConstraints(CSint **allvars, int nbVars);
(define-cproc cs-find-free-var-nb-constraints
  (vint::<vector>)
  (body <csint>
        "int nbVars = SCM_VECTOR_SIZE(vint);"
        "printf(\"vector nbVars:%d\\n\", nbVars);"
        "ScmVector *vec = SCM_VECTOR(vint);"
        "CSint **allvars = calloc(sizeof(CSint*), nbVars);"
        "if (allvars != NULL) {"
        "int i = 0;"
        "for (i = 0; i < nbVars; i++) {"
        "allvars[i] = CSINT_UNBOX(Scm_VectorRef(vec, i, SCM_NIL));"
        "#ifdef DEBUG"
        "cs_printf(\"vint[%d] %T\\n\", i, allvars[i]);"
        "#endif"
        "}"
        "} else {"
        "}"
        "SCM_RESULT = cs_findFreeVarNbConstraints(allvars, nbVars);"))
;;  int cs_getNbFails(void);
(define-cproc cs-get-nb-fails () ::<int>
  (result (cs_getNbFails)))

;;  int cs_getNbChoicePoints(void);
(define-cproc cs-get-nb-choice-points () ::<int>
  (result (cs_getNbChoicePoints)))


;;  IZBOOL cs_search(CSint **allvars, int nbVars, CSint* (*findFreeVar)(CSint **allvars, int nbVars));
"
#include \"izclib-bridge.c\"
"



(define-cproc test-vector-set
  (vint::<vector>)
  (body <boolean>
        "int nStatus = SCM_INT_VALUE(SCM_FALSE);"
        "int nbVars = SCM_VECTOR_SIZE(vint);"
        "ScmVector *vec = SCM_VECTOR(vint);"
        "int i;"
        "for (i = 0; i < nbVars; i++) {"
        "#ifdef DEBUG"
        "#endif"
        "Scm_VectorSet(vec, i, SCM_MAKE_INT(i));"
        "}"
        "#ifdef DEBUG"
        "#endif"
        "SCM_RESULT = nStatus;"
        ))

(define-cproc cs-search
  (vint::<vector> :optional findfreevar) ::<boolean>
  (let* ([nStatus::int 0]
	 [nbVars::int (SCM_VECTOR_SIZE vint)]
	 [vec::ScmVector* (SCM_VECTOR vint)]
	 [allvars::CSint** (calloc (sizeof csintp_) nbVars)]
	 [i::int 0])
    (.if DEBUG
	 (begin
	   (printf "cs-search called.\n")
	   (printf "vector nbVars:%d\n" nbVars)
	   (printf "before allocation.%d x %d \n" (sizeof csintp_) nbVars)))
    (if (!= allvars NULL)
	(for [() (< i nbVars) (post++ i)]
	     (.if DEBUG
		  (printf "assign to allvars[%d]\n" i))
	     (set! (aref allvars i)
		   (CSINT_UNBOX (Scm_VectorRef vec i SCM_NIL)))
	     (.if DEBUG
		  (cs_printf "vint[%d] %T\n" i (aref allvars i)))
	     ))
    ;; NOTE: assign procedure or symbol to global variable.
    (set! g_findFreeVarProc (SCM_OBJ findfreevar))
    (.if DEBUG
	 (printf "before call cs_search\n"))
    (set! nStatus (cs_search allvars nbVars cs_findFreeVarBridge))
    (let* ([i::int 0])
      (for [() (< i nbVars) (post++ i)]
	   (begin
	     (.if DEBUG
		  (cs_printf "after call cs_search allvars[%d] %T\n"
			     i (aref allvars i)))
	   
	     (Scm_VectorSet vec i (CSINT_BOX (aref allvars i))))))
    (let* ([i::int 0])
      (for [() (< i nbVars) (post++ i)]
	   (.if DEBUG
		(cs_printf "ref %T\n" (CSINT_UNBOX (Scm_VectorRef vec i SCM_NIL))))))
    (result nStatus)))

;;  IZBOOL cs_searchFail(CSint **allvars, int nbVars, CSint*
;; 			  (*findFreeVar)(CSint **allvars, int nbVars),
;; 			  int NbFailsMax);
(define-cproc cs-search-fail
  (vint::<vector> findfreevar failmax::<int>) ::<boolean>
  (let* ([size::int (SCM_VECTOR_SIZE vint)]
	 [vec::ScmVector* (SCM_VECTOR vint)]
	 [tint::CSint**  (calloc (sizeof csintp_) size)]
	 [ret::int SCM_FALSE]
	 )
    (if (!= tint NULL)
	(let* ([i::int 0])
	  (for [() (< i size) (post++ i)]
	       (set! (aref tint i) (CSINT_UNBOX (Scm_VectorRef vec i SCM_NIL)))
	       (.if DEBUG
		    (cs_printf "vint[%d] %T\n" i (aref tint i)))
	       )))
    (set! g_findFreeVarProc (SCM_OBJ findfreevar))
    (result (cs_searchFail tint size cs_findFreeVarBridge failmax))))

;;  IZBOOL cs_searchCriteria(CSint **allvars, int nbVars,
;; 			      int (*findFreeVar)(CSint **allvars, int nbVars),
;; 			      int (*criteria)(int index, int val));
(define-cproc cs-search-criteria
  (vint::<vector>
   findfreevar
   criteria)
  (body <boolean>
        "int size = SCM_VECTOR_SIZE(vint);"
        "printf(\"vector size:%d\\n\", size);"
        "ScmVector *vec = SCM_VECTOR(vint);"
        "CSint **tint = calloc(sizeof(CSint*), size);"
        "int nStatus = SCM_INT_VALUE(SCM_FALSE);"
        "if (tint != NULL) {"
        "int i = 0;"
        "for (i = 0; i < size; i++) {"
        "tint[i] = CSINT_UNBOX(Scm_VectorRef(vec, i, SCM_NIL));"
        "#ifdef DEBUG"
        "cs_printf(\"vint[%d] %T\\n\", i, tint[i]);"
        "#endif"
        "}"
        "/**/"
        "g_findFreeVarProc = SCM_OBJ(findfreevar);"
        "nStatus = cs_searchCriteria(tint, size, cs_findFreeVarIntBridge, cs_criteriaBridge);"
        "} else {"
        "printf(\"memory allocation error\");"
        "}"
        "SCM_RESULT = SCM_INT_VALUE(nStatus);"
        ))
;;  IZBOOL cs_searchCriteriaFail(CSint **allvars, int nbVars,
;; 				  int (*findFreeVar)(CSint **allvars, int nbVars),
;; 				  int (*criteria)(int index, int val),
;; 				  int NbFailsMax);
(define-cproc cs-search-criteria-fail
  (vint::<vector>
   findfreevar
   criteria
   failmax::<int>)
  (body <boolean>
        "int size = SCM_VECTOR_SIZE(vint);"
        "printf(\"vector size:%d\\n\", size);"
        "ScmVector *vec = SCM_VECTOR(vint);"
        "CSint **tint = calloc(sizeof(CSint*), size);"
        "int ret = SCM_INT_VALUE(SCM_FALSE);"
        "if (tint != NULL) {"
        "int i = 0;"
        "for (i = 0; i < size; i++) {"
        "tint[i] = CSINT_UNBOX(Scm_VectorRef(vec, i, SCM_NIL));"
        "#ifdef DEBUG"
        "cs_printf(\"vint[%d] %T\\n\", i, tint[i]);"
        "#endif"
        "}"
        "/**/"
        "g_findFreeVarProc = SCM_OBJ(findfreevar);"
        "g_criteriaProc = SCM_OBJ(criteria);"
        "ret = cs_searchCriteriaFail(tint, size, cs_findFreeVarIntBridge, cs_criteriaBridge, failmax);"
        "} else {"
        "printf(\"memory allocation error\");"
        "}"
        "SCM_RESULT = SCM_INT_VALUE(ret);"
        ))
;;  IZBOOL cs_searchMatrix(CSint ***matrix, int NbRows, int NbCols,
;; 			    int (*findFreeRow)(CSint ***matrix, int NbRows, int NbCols),
;; 			    int (*findFreeCol)(int row, CSint **Row, int NbCols),
;; 			    int (*criteria)(int row, int col, int val));
;;  IZBOOL cs_searchMatrixFail(CSint ***matrix, int NbRows, int NbCols,
;; 				int (*findFreeRow)(CSint ***matrix, int NbRows, int NbCols),
;; 				int (*findFreeCol)(int row, CSint **Row, int NbCols),
;; 				int (*criteria)(int row, int col, int val),
;; 				int NbFailsMax);
;;  IZBOOL cs_Vsearch(int nbVars, CSint *vint, ...);

;;  IZBOOL cs_findAll(CSint **allvars, int nbVars, CSint* (*findFreeVar)(CSint **allvars, int nbVars),
                                        ;		       void (*found)(CSint **allvars, int nbVars));
(define-cproc cs-find-all
  (vint::<vector> findfreevar found) ::<boolean>
  (body <boolean>
        "#if defined(DEBUG) && defined(DEBUG_FUNC)"
        "printf(\"FUNC: cs-find-all called.\\n\");"
        "#endif"
        "int size = SCM_VECTOR_SIZE(vint);"
        "printf(\"vector size:%d\\n\", size);"
        "ScmVector *vec = SCM_VECTOR(vint);"
        "CSint **tint = SCM_NEW_ARRAY(CSint*, size);"
        "int ret = SCM_INT_VALUE(SCM_FALSE);"
        "if (tint != NULL) {"
        "int i = 0;"
        "for (i = 0; i < size; i++) {"
        "tint[i] = CSINT_UNBOX(Scm_VectorRef(vec, i, SCM_NIL));"
        "#ifdef DEBUG"
        "cs_printf(\"vint[%d] %T\\n\", i, tint[i]);"
        "printf(\"CSint pointer tint[%d] store address 0x%p\\n\", i, tint[i]);"
        "printf(\"CSint pointer tint[%d] address 0x%p\\n\", i, &tint[i]);"
        "#endif"
        "}"
        "/**/"
        "g_findFreeVarProc = SCM_OBJ(findfreevar);"
        "g_foundProc = SCM_OBJ(found);"
        "ret = cs_findAll(tint, size, cs_findFreeVarBridge, cs_foundBridge);"
        "} else {"
        "printf(\"memory allocation error\");"
        "}"
        "#ifdef DEBUG"
        "int i;"
        "for (i = 0; i < size; i++) {"
        "tint[i] = CSINT_UNBOX(Scm_VectorRef(vec, i, SCM_NIL));"
        "printf(\"after cs_findAll\\n\");"
        "cs_printf(\"vint[%d] %T\\n\", i, tint[i]);"
        "printf(\"CSint pointer tint[%d] store address 0x%p\\n\", i, tint[i]);"
        "printf(\"CSint pointer tint[%d] address 0x%p\\n\", i, &tint[i]);"
        "}"
        "#endif"
        "SCM_RESULT = SCM_INT_VALUE(ret);"
        ))
;;  IZBOOL cs_minimize(CSint **allvars, int nbVars, CSint* (*findFreeVar)(CSint **allvars, int nbVars), CSint *cost,
;;			void (*found)(CSint **allvars, int nbVars, CSint *cost));
(define-cproc cs-minimize
  (vint::<vector> findfreevar cost found) ::<boolean>
  (body <boolean>
        "#if defined(DEBUG) && defined(DEBUG_FUNC)"
        "printf(\"FUNC: cs-minimize called.\\n\");"
        "#endif"
        "int size = SCM_VECTOR_SIZE(vint);"
        "printf(\"vector size:%d\\n\", size);"
        "ScmVector *vec = SCM_VECTOR(vint);"
        "CSint **tint = SCM_NEW_ARRAY(CSint*, size);"
        "int ret = SCM_INT_VALUE(SCM_FALSE);"
        "if (tint != NULL) {"
        "int i = 0;"
        "for (i = 0; i < size; i++) {"
        "tint[i] = CSINT_UNBOX(Scm_VectorRef(vec, i, SCM_NIL));"
        "#ifdef DEBUG"
        "cs_printf(\"vint[%d] %T\\n\", i, tint[i]);"
        "printf(\"CSint pointer tint[%d] store address 0x%p\\n\", i, tint[i]);"
        "printf(\"CSint pointer tint[%d] address 0x%p\\n\", i, &tint[i]);"
        "#endif"
        "}"
        "/**/"
        "g_findFreeVarProc = SCM_OBJ(findfreevar);"
        "g_foundProc = SCM_OBJ(found);"
        "ret = cs_minimize(tint, size, cs_findFreeVarBridge, CSINT_UNBOX(cost), cs_foundWithCostBridge);"
        "} else {"
        "printf(\"memory allocation error\");"
        "}"
        "#ifdef DEBUG"
        "int i;"
        "for (i = 0; i < size; i++) {"
        "tint[i] = CSINT_UNBOX(Scm_VectorRef(vec, i, SCM_NIL));"
        "printf(\"after cs_minimize\\n\");"
        "cs_printf(\"vint[%d] %T\\n\", i, tint[i]);"
        "printf(\"CSint pointer tint[%d] store address 0x%p\\n\", i, tint[i]);"
        "printf(\"CSint pointer tint[%d] address 0x%p\\n\", i, &tint[i]);"
        "}"
        "#endif"
        "SCM_RESULT = SCM_INT_VALUE(ret);"
        ))

;;
;;
;; Demon */
;;

;;  IZBOOL cs_eventAllKnown(CSint **tint, int size,
;;			     char (*allKnown)(CSint **tint, int size, void *extra),
;;			     void *extra);


;;  IZBOOL cs_eventAllKnown(CSint **tint, int size,
;;			     char (*allKnown)(CSint **tint, int size, void *extra),
;;			     void *extra);

(define-cproc cs-event-all-known
  (array allknown) ::<boolean>
  (let* ([size::int 0]
	 [tint::CSint** NULL]
	 [vec::ScmVector* NULL]
	 [retval::int 0]
	 [i::int 0])
    (cond [(SCM_VECTORP array)
	   (begin
	     (set! size (SCM_VECTOR_SIZE array))
	     (set! tint (calloc (sizeof csintp_) size))
	     (set! vec (SCM_VECTOR array))
	     )]
	  [(SCM_LISTP array)
	   (begin
	     (set! size (Scm_Length array))
	     (set! tint (calloc (sizeof csintp_) size))
	     (set! vec (Scm_ListToVector array 0 -1)))]
	  [else
	   (Scm_Error "list or vector required, but got")])
    (if (!= tint NULL)
	(for [(set! i 0) (< i size) (post++ i)]
	     (set! (aref tint i) (CSINT_UNBOX (Scm_VectorRef vec i SCM_NIL)))
	     (.if DEBUG
		  (cs_printf "vint[%d] %T\n" i (aref tint i))))
	;; error
	)
    (result (cs_eventAllKnown tint size cs_eventAllKnownBridge allknown))))

;;  IZBOOL cs_eventKnown(CSint **tint, int size,
;;			  char (*known)(int val, int index, CSint **tint, int size, void *extra),
;;			  void *extra);

(define-cproc cs-event-known
  (vint::<vector> known) ::<boolean>
  (body <boolean>
        "int size = SCM_VECTOR_SIZE(vint);"
        "#if defined(DEBUG) && defined(DEBUG_FUNC)"
        "printf(\"cs-event-known called.\\n\");"
        "#endif"
        "#if defined(DEBUG)"
        "printf(\"vector size:%d\\n\", size);"
        "#endif"
        "ScmVector *vec = SCM_VECTOR(vint);"
        "CSint **tint = SCM_NEW_ARRAY(CSint*, size);"
        "int ret = SCM_INT_VALUE(SCM_FALSE);"
        "if (tint != NULL) {"
        "int i = 0;"
        "for (i = 0; i < size; i++) {"
        "tint[i] = CSINT_UNBOX(Scm_VectorRef(vec, i, SCM_NIL));"
        "#ifdef DEBUG"
        "cs_printf(\"vint[%d] %T\\n\", i, tint[i]);"
        "#endif"
        "}"
        "ret = cs_eventKnown(tint, size, cs_eventKnownBridge, known);"
        "} else {"
        "Scm_Error(\"memory allocation error for <csint>.\");"
        "}"
        "SCM_RESULT = SCM_INT_VALUE(ret);"
        ))


;;
;; in scheme, (define (callback
;;
;;  void cs_eventNewMin(CSint **tint, int size,
;; 			   char (*newMin)(CSint *vint, int index, int oldMin, CSint **tint, int size, void *extra),
;; 			   void *extra);
(define-cproc cs-event-new-min
  (vint::<vector> newmin) ::<void>
  (body <void>
        "int size = SCM_VECTOR_SIZE(vint);"
        "printf(\"vector size:%d\\n\", size);"
        "ScmVector *vec = SCM_VECTOR(vint);"
        "CSint **tint = calloc(sizeof(CSint*), size);"
        "if (tint != NULL) {"
        "int i = 0;"
        "for (i = 0; i < size; i++) {"
        "tint[i] = CSINT_UNBOX(Scm_VectorRef(vec, i, SCM_NIL));"
        "#ifdef DEBUG"
        "cs_printf(\"vint[%d] %T\\n\", i, tint[i]);"
        "#endif"
        "}"
        "cs_eventNewMin(tint, size, cs_eventNewMinBridge, newmin);"
        "} else {"
        "printf(\"failed to allocate memory.\\n\");"
        "}"
        ))
;;  void cs_eventNewMax(CSint **tint, int size,
;; 			   char (*newMax)(CSint *vint, int index, int oldMax, CSint **tint, int size, void *extra),
;; 			   void *extra);
(define-cproc cs-event-new-max
  (vint::<vector>
   newmax)
  (body <void>
        "int size = SCM_VECTOR_SIZE(vint);"
        "printf(\"vector size:%d\\n\", size);"
        "ScmVector *vec = SCM_VECTOR(vint);"
        "CSint **tint = calloc(sizeof(CSint*), size);"
        "if (tint != NULL) {"
        "int i = 0;"
        "for (i = 0; i < size; i++) {"
        "tint[i] = CSINT_UNBOX(Scm_VectorRef(vec, i, SCM_NIL));"
        "#ifdef DEBUG"
        "cs_printf(\"vint[%d] %T\\n\", i, tint[i]);"
        "#endif"
        "}"
        "cs_eventNewMax(tint, size, cs_eventNewMaxBridge, newmax);"
        "} else {"
        ""
        "}"
        ))
;;  void cs_eventNeq(CSint **tint, int size,
;; 			char (*neq)(CSint *vint, int index, int neqValue, CSint **tint, int size, void *extra), 
;; 			void *extra);
(define-cproc cs-event-neq
  (vint::<vector>
   neq)
  (body <void>
        "int size = SCM_VECTOR_SIZE(vint);"
        "printf(\"vector size:%d\\n\", size);"
        "ScmVector *vec = SCM_VECTOR(vint);"
        "CSint **tint = calloc(sizeof(CSint*), size);"
        "int i = 0;"
        "for (i = 0; i < size; i++) {"
        "tint[i] = CSINT_UNBOX(Scm_VectorRef(vec, i, SCM_NIL));"
        "#ifdef DEBUG"
        "cs_printf(\"vint[%d] %T\\n\", i, tint[i]);"
        "#endif"
        "}"
        "cs_eventNeq(tint, size, cs_eventNeqBridge, neq);"
        ))
;; Context */

;;  void cs_backtrack(CSint *vint, int index, void (*backtrack)(CSint *vint, int index));
(define-cproc cs-backtrack
  (vint::<csint>
   index::<int>
   backtrack)
  (body <void>
        "int size = SCM_VECTOR_SIZE(vint);"
        "printf(\"vector size:%d\\n\", size);"
        "ScmVector *vec = SCM_VECTOR(vint);"
        "CSint **tint = calloc(sizeof(CSint*), size);"
        "int i = 0;"
        "for (i = 0; i < size; i++) {"
        "tint[i] = CSINT_UNBOX(Scm_VectorRef(vec, i, SCM_NIL));"
        "#ifdef DEBUG"
        "cs_printf(\"vint[%d] %T\\n\", i, tint[i]);"
        "#endif"
        "}"
        "g_backtrackProc = SCM_OBJ(backtrack);"
        "cs_backtrack(vint, index, cs_backtrackBridge);"
        ))

(define-cproc cs-save-context () ::<int>
  (result (cs_saveContext)))

(define-cproc cs-forget-save-context () ::<void>
  (cs_forgetSaveContext))

(define-cproc cs-restore-and-save-context () ::<void>
  (cs_restoreAndSaveContext))

(define-cproc cs-accept-context () ::<void>
  (cs_acceptContext))

(define-cproc cs-accept-all () ::<void>
  (cs_acceptAll))

(define-cproc cs-restore-context () ::<void>
  (cs_restoreContext))

(define-cproc cs-restore-all () ::<void>
  (cs_restoreAll))

;;
;; you must call this procedure first.
;;
(define-cproc cs-init ()
  (cs_init))

;;
;; you must call this procedure at the end.
;;
(define-cproc cs-end ()
  (cs_end))

(define-cproc cs-forget-save-context-until
  (label::<int>)
  (cs_forgetSaveContextUntil label))

(define-cproc cs-accept-context-until (label::<int>)
  (cs_acceptContextUntil label))

(define-cproc cs-restore-context-until (label::<int>)
  (cs_restoreContextUntil label))

(define-cproc cs-init-err ()
  (cs_initErr))

(define-cproc cs-get-err () ::<int>
  (cs_getErr()))

(define-cproc test-izc () ::<const-cstring>
  (result "test_izc"))

;; ;;
;; (define-cproc test-izc-array (vint::<vector>) ::<vector>
;;   (body <vector>
;;         "int size = 10;"
;;         "ScmVector *vec = SCM_VECTOR(Scm_MakeVector(size, SCM_NIL));"
;;         "SCM_RESULT = vec;"))

;; (define-cproc test-izc-array (vint::<list>) ::<list>
;;   (body <list>
;;         "int size = 10;"
;;         "ScmObj *list = SCM_LIST(Scm_MakeList(size, SCM_NIL));"
;;         "SCM_RESULT = list;"))


;; Local variables:
;; mode: scheme
;; end:
